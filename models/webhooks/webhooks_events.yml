openapi: 3.0.1
info:
  title: Webhook Callbacks
  description: For a list of all webhook events, see [Webhook Events](/api-docs/store-management/webhooks/webhook-events).
  version: ""
servers:
- url: //api.bigcommerce.com/
tags:
- name: Subscriber
- name: Product
- name: SKU
- name: Order
- name: Customer
- name: Cart
- name: Cart LineItem
- name: Category
- name: Shipment
paths:
  /store/cart/lineItem/created:
    post:
      tags:
      - Events
      summary: /store/cart/lineItem/created
      description: |-
        This webhook will fire whenever a new cart is created either via a storefront shopper adding their first item to the cart or when a new cart being created via an API consumer. If it is from the storefront, then it fires when the first product is added to a new session.(The cart did not exist before) For the API it means a POST to /carts, (V3 and Storefront API).

        The store/cart/lineItem/updated will also fire.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/cart/lineItem/updated:
    post:
      tags:
      - Events
      summary: /store/cart/lineItem/updated
      description: |-
        This webhook is fired whenever a cart is modified through the changes in its line items. Eg. when a new item is added to a cart or an existing item’s quantity is updated. This hook also fires when the email is changed during guest checkout or an existing item is deleted. The payload will include the ID of the cart being updated.

        This webhook is also fired along with cart created, because the first product being added to an empty cart triggers an update.

        - Logging into store account after creating a cart (email is inherited from store account email).
        - Entering email address via guest checkout.
        - Changing the email in guest checkout.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/cart/lineItem/deleted:
    post:
      tags:
      - Events
      summary: /store/cart/lineItem/deleted
      description: |-
        This webhook will fire whenever a cart is deleted. This will occur either when all items have been removed from a cart and it is auto-deleted, or when the cart is explicitly removed via a DELETE request by an API consumer. This ends the lifecycle of the cart.

        The store/cart/lineItem/updated webhook will also fire when the last item is removed.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/information/updated:
    post:
      tags:
      - Events
      summary: /store/information/updated
      description: |-
        This webhook is fired whenever a cart is modified through the changes in its line items. Eg. when a new item is added to a cart or an existing item’s quantity is updated. This hook also fires when the email is changed during guest checkout or an existing item is deleted. The payload will include the ID of the cart being updated.

        This webhook is also fired along with cart created, because the first product being added to an empty cart triggers an update.

        - Logging into store account after creating a cart (email is inherited from store account email).
        - Entering email address via guest checkout.
        - Changing the email in guest checkout.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/customer/created:
    post:
      tags:
      - Events
      summary: /store/customer/created
      description: This webhook will fire when a new customer record is created, either
        in the Control Panel, via API or via a storefront.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/customer/updated:
    post:
      tags:
      - Events
      summary: /store/customer/updated
      description: This webhook fires when a customer record is updated either via
        the Control Panel, via API or a via storefront
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/customer/deleted:
    post:
      tags:
      - Events
      summary: /store/customer/deleted
      description: This webhook will fire whenever a customer record is deleted either
        via the Control Panel or API. Customers cannot delete accounts via the storefront.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/sku/created:
    post:
      tags:
      - Events
      summary: /store/sku/created
      description: |-
        This webhook will fire whenever a new cart is created either via a storefront shopper adding their first item to the cart or when a new cart being created via an API consumer. If it is from the storefront, then it fires when the first product is added to a new session.(The cart did not exist before) For the API it means a POST to /carts, (V3 and Storefront API).

        The store/sku/updated will also fire.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/sku/updated:
    post:
      tags:
      - Events
      summary: /store/sku/updated
      description: |-
        This webhook is fired whenever a cart is modified through the changes in its line items. Eg. when a new item is added to a cart or an existing item’s quantity is updated. This hook also fires when the email is changed during guest checkout or an existing item is deleted. The payload will include the ID of the cart being updated.

        This webhook is also fired along with cart created, because the first product being added to an empty cart triggers an update.

        - Logging into customer account after creating a cart (email is inherited from customer account email).
        - Entering email address via guest checkout.
        - Changing the email in guest checkout.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/sku/deleted:
    post:
      tags:
      - Events
      summary: /store/sku/deleted
      description: |-
        This webhook will fire whenever a cart is deleted. This will occur either when all items have been removed from a cart and it is auto-deleted, or when the cart is explicitly removed via a DELETE request by an API consumer. This ends the lifecycle of the cart.
        The store/sku/updated webhook will also fire when the last item is removed.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/category/created:
    post:
      tags:
      - Events
      summary: /store/category/created
      description: This webhook will fire whenever a new category is created in the
        Control Panel or via API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/category/updated:
    post:
      tags:
      - Events
      summary: /store/category/updated
      description: This webhook will fire when a category record is modified either
        via the Control Panel or via API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/category/deleted:
    post:
      tags:
      - Events
      summary: /store/category/deleted
      description: This webhook will fire whenever a category is deleted via either
        the Control Panel or API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/order/created:
    post:
      tags:
      - Events
      summary: /store/order/created
      description: This webhook will fire whenever a new order is created either via
        a storefront shopper, or via an API consumer.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/order/deleted:
    post:
      tags:
      - Events
      summary: /store/order/deleted
      description: This webhook will fire whenever an order is deleted.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/cart/created:
    post:
      tags:
      - Events
      summary: /store/cart/created
      description: |-
        This webhook will fire whenever a new cart is created either via a storefront shopper adding their first item to the cart or when a new cart being created via an API consumer. If it is from the storefront, then it fires when the first product is added to a new session.(The cart did not exist before) For the API it means a POST to /carts, (V3 and Storefront API).

        The store/cart/updated will also fire.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/cart/updated:
    post:
      tags:
      - Events
      summary: /store/cart/updated
      description: |-
        This webhook is fired whenever a cart is modified through the changes in its line items. Eg. when a new item is added to a cart or an existing item’s quantity is updated. This hook also fires when the email is changed during guest checkout or an existing item is deleted. The payload will include the ID of the cart being updated.

        This webhook is also fired along with cart created, because the first product being added to an empty cart triggers an update.

        - Logging into customer account after creating a cart (email is inherited from customer account email).
        - Entering email address via guest checkout.
        - Changing the email in guest checkout.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/cart/deleted:
    post:
      tags:
      - Events
      summary: /store/cart/deleted
      description: This webhook will fire whenever a cart is deleted. This will occur
        either when all items have been removed from a cart and it is auto-deleted,
        or when the cart is explicitly removed via a DELETE request by an API consumer.
        This ends the lifecycle of the cart. The store/cart/updated webhook will also
        fire when the last item is removed.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/product/created:
    post:
      tags:
      - Events
      summary: /store/product/created
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      responses:
        200:
          description: ""
          content:
            '*/*':
              schema:
                type: object
                properties:
                  ?
                  : $ref: '#/components/schemas/callback_Base'
                  data:
                    $ref: '#/components/schemas/product-base'
            application/json:
              example:
                created_at: 1592432867
                store_id: "999379820"
                producer: stores/vm2iajhsih
                scope: store/product/created
                hash: 0a90e1aaa335eb8e413051965468a2fcc23b3b11
                data:
                  type: product
                  id: 5102
      x-codegen-request-body-name: body
  /store/product/updated:
    post:
      tags:
      - Events
      summary: /store/product/updated
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/product/deleted:
    post:
      tags:
      - Events
      summary: /store/product/deleted
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      responses:
        200:
          description: ""
          content:
            '*/*':
              schema:
                type: object
                properties:
                  ?
                  : $ref: '#/components/schemas/callback_Base'
                  data:
                    $ref: '#/components/schemas/product-base'
            application/json:
              example:
                created_at: 1592433286
                store_id: "999379820"
                producer: stores/vm2iajhsih
                scope: store/product/deleted
                hash: 0623e95b77bbd5e3874559c871eb1961d0cbdd05
                data:
                  type: product
                  id: 5102
      x-codegen-request-body-name: body
  /store/cart/couponApplied:
    post:
      tags:
      - Events
      summary: /store/cart/couponApplied
      description: This webhook will fire whenever a new coupon code is applied to
        a cart. It will include the ID of the coupon code.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/cart/abandoned:
    post:
      tags:
      - Events
      summary: /store/cart/abandoned
      description: This webhook will fire once after a cart is abandoned. A cart is
        considered abandoned if no changes were made at least one hour after the last
        modified property.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/cart/converted:
    post:
      tags:
      - Events
      summary: /store/cart/converted
      description: |-
        This hook fires when a cart is converted into an order, which is typically after the payment step of checkout on the storefront. At this point, the Cart is no longer accessible and has been deleted.
        This hook returns both the Cart ID and Order ID for correlation purposes.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/order/statusUpdated:
    post:
      tags:
      - Events
      summary: /store/order/statusUpdated
      description: This webhook fires when the status of an order is changed. It also
        fires when an order is created, because the order status is changed from `0`
        to a different status (depending on the payment gateway and payment capture
        settings).
      responses:
        200:
          description: ""
          content:
            '*/*':
              schema:
                type: object
                properties:
                  ?
                  : $ref: '#/components/schemas/callback_Base'
                  data:
                    $ref: '#/components/schemas/order-updated'
            application/json:
              example:
                created_at: 1592517272
                store_id: "999379820"
                producer: stores/vm2iajhsih
                scope: store/order/statusUpdated
                hash: 71ba387dfa754de7e2636d035da133791e618fa6
                data:
                  type: order
                  id: 349
                  status:
                    previous_status_id: 0
                    new_status_id: 11
  /store/order/message/created:
    post:
      tags:
      - Events
      summary: store/order/message/created
      description: "\tThis webhook is fired whenever a cart is modified through the\
        \ changes in its line items. Eg. when a new item is added to a cart or an\
        \ existing item’s quantity is updated. This hook also fires when the email\
        \ is changed during guest checkout or an existing item is deleted. The payload\
        \ will include the ID of the cart being updated.\nThis webhook is also fired\
        \ along with cart created, because the first product being added to an empty\
        \ cart triggers an update.\n- Logging into customer account after creating\
        \ a cart (email is inherited from customer account email)\n- Entering email\
        \ address via guest checkout\n-Changing the email in guest checkout"
      responses:
        200:
          description: ""
          content:
            '*/*':
              schema:
                type: object
                properties:
                  ?
                  : $ref: '#/components/schemas/callback_Base'
                  data:
                    $ref: '#/components/schemas/order-message-created'
            application/json:
              example:
                created_at: 1592518324
                store_id: "999379820"
                producer: stores/vm2iajhsih
                scope: store/order/message/created
                hash: 4bda8a99936ba9f4486fed0a7de47eb50789fdb0
                data:
                  type: order
                  id: 348
                  message:
                    order_message_id: 5
  /store/order/archived:
    post:
      tags:
      - Events
      summary: store/order/archived
      description: This webhooks is triggered when an order is archived
  /store/customer/address/created:
    post:
      tags:
      - Events
      summary: store/customer/address/created
      description: This webhook fires when a customer address is created via either
        the Control Panel, API or a storefront.
  /store/customer/address/updated:
    post:
      tags:
      - Events
      summary: store/customer/address/updated
      description: This webhook fires when a customer address is updated via either
        the Control Panel, API or a storefront.
  /store/customer/address/deleted:
    post:
      tags:
      - Events
      summary: /store/customer/address/deleted
      description: This webhook fires when a customer address is deleted via either
        the Control Panel, API or a storefront.
  /store/shipment/created:
    post:
      tags:
      - Events
      summary: /store/shipment/created
      description: |
        This webhook fires when a shipment is created via either the Control Panel or the Orders API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/shipment/updated:
    post:
      tags:
      - Events
      summary: /store/shipment/updated
      description: |+
        This webhook fires when a shipment is updated via either the Control Panel or the Orders API.

      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/shipment/deleted:
    post:
      tags:
      - Events
      summary: /store/shipment/deleted
      description: |
        This webhook fires when a shipment is deleted via either the Control Panel or the Orders API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/subscriber/created:
    post:
      tags:
      - Events
      summary: /store/subscriber/created
      description: This webhook is fired when a newsletter subscriber is created either
        via a storefront shopper or via an API consumer.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/subscriber/updated:
    post:
      tags:
      - Events
      summary: /store/subscriber/updated
      description: This webhook is fired when a store newsletter subscriber is updated.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/subscriber/deleted:
    post:
      tags:
      - Events
      summary: /store/subscriber/deleted
      description: This webhook is fired when a store newsletter subscriber is deleted.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      x-codegen-request-body-name: body
  /store/product/inventory/updated:
    post:
      tags:
      - Events
      summary: store/product/inventory/updated
  /store/product/inventory/order/updated:
    post:
      tags:
      - Events
      summary: store/product/inventory/order/updated
      responses:
        200:
          description: ""
          content:
            '*/*':
              schema:
                type: object
                properties:
                  ?
                  : $ref: '#/components/schemas/callback_Base'
                  data:
                    $ref: '#/components/schemas/product-inventory'
            application/json:
              example:
                created_at: 1592433199
                store_id: "999379820"
                producer: stores/vm2iajhsih
                scope: store/product/inventory/order/updated
                hash: 30b7ed5d60e9363a27fb0138053edd8052d68fe5
                data:
                  type: product
                  id: 5102
                  inventory:
                    product_id: 5102
                    method: relative
                    value: -1
  /store/order/updated:
    post:
      tags:
      - Events
      summary: /store/order/updated
      responses:
        200:
          description: ""
          content:
            '*/*':
              schema:
                type: object
                properties:
                  ?
                  : $ref: '#/components/schemas/callback_Base'
                  data:
                    $ref: '#/components/schemas/order-updated'
            application/json:
              example:
                created_at: 1592517272
                store_id: "999379820"
                producer: stores/vm2iajhsih
                scope: store/order/updated
                hash: dbf6f909d297059b12a6d11b56619449b4f24e3d
                data:
                  type: order
                  id: 349
  /store/order/refund/created:
    post:
      tags:
      - Events
      summary: /store/order/refund/created
      description: Fires when an order is refunded.
      responses:
        200:
          description: ""
          content:
            '*/*':
              schema:
                type: object
                properties:
                  ?
                  : $ref: '#/components/schemas/callback_Base'
                  data:
                    $ref: '#/components/schemas/refund_created'
            application/json:
              example:
                scope: store/order/refund/created
                store_id: "1025646"
                data:
                  type: order
                  id: 250
                  refund:
                    refund_id: 3
                hash: cb07cdbdda8b1965e812693d5988154807eeed02
                created_at: 1561479923
                producer: stores/{store_hash}
components:
  schemas:
    cart_Created:
      title: cart_Created
      type: object
      properties:
        type:
          type: string
        id:
          type: string
    cartLineItem_Created:
      title: cartLineItem_Created
      type: object
      properties:
        type:
          type: string
        id:
          type: string
        cartId:
          type: string
    callback_Base:
      title: callback_Base
      type: object
      properties:
        store_id:
          type: string
        hash:
          type: string
        created_at:
          type: integer
        producer:
          type: string
        scope:
          type: string
    order-created:
      title: Order Created
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
    order-updated:
      title: Order Updated
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
        status:
          type: object
          properties:
            previous_status_id:
              type: integer
            new_status_id:
              type: integer
    order-message-created:
      title: Order Message Created
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
        message:
          type: object
          properties:
            order_message_id:
              type: integer
    sku_Updated:
      title: sku_Updated
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
        sku:
          type: object
          properties:
            product_id:
              type: integer
            variant_id:
              type: integer
    cart_couponApplied:
      title: cart_couponApplied
      type: object
      properties:
        type:
          type: string
        id:
          type: string
        couponId:
          type: integer
    storeInfo_Updated:
      title: storeInfo_Updated
      allOf:
      - $ref: '#/components/schemas/callback_Base'
      - type: object
        properties:
          data:
            type: object
            properties:
              type:
                type: string
    customer-created:
      title: Customer Created
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
    customer-address-created:
      title: Customer Address Created
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
        address:
          type: object
          properties:
            customer_id:
              type: integer
    shipment_Created:
      title: shipment_Created
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
        orderId:
          type: integer
    categoryBase:
      title: Category Base
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
    subscriber_Created:
      title: subscriber_Created
      type: object
      properties:
        type:
          type: string
        id:
          type: string
    product-base:
      title: Product Base
      type: object
      properties:
        type:
          type: string
        id:
          type: number
    product-inventory:
      title: Product Inventory
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
        inventory:
          type: object
          properties:
            product_id:
              type: integer
            method:
              type: string
            value:
              type: integer
    refund_created:
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
        refund:
          type: object
          properties:
            refund_id:
              type: integer
  responses:
    CallbackResponse:
      description: |-
        To acknowledge that you received the webhook without issue, your server should return a 200 HTTP status code. Any other information you return in the request headers or request body will be ignored. Any response code outside the 200 range, including 3_xx_ codes, will indicate to us that you did not receive the webhook. When a webhook is not received (for whatever reason), we will retry the callback as described below.

        Need to set up a quick destination URL for testing? See [Tools for testing webhooks](/api-docs/getting-started/webhooks/about-webhooks#about-webhooks_tools-for-debugging-and-testing-webhooks).
      content:
        '*/*':
          schema:
            type: object
    Webhooks Response:
      description: ""
      content:
        '*/*':
          schema:
            type: object
            properties:
              id:
                type: integer
                description: Id of the webhook
                example: 18048287
              client_id:
                type: string
                description: Client ID, unique to the store
                example: m9r6keqmo7h7f23btnpwernbez1kglkl
              store_hash:
                type: string
                description: 'Store permanent ID. '
                example: sftg45fsd
              scope:
                type: string
                description: Webhook event subscribed to
                example: store/order/*
              destination:
                type: string
                description: URL that returns a 200 response for webhooks
                example: https://665b65a6.ngrok.io/webhooks
              headers:
                type: object
                properties:
                  custom:
                    type: string
                description: You can pass in any number of custom headers to validate
                  webhooks being returned.
              is_active:
                type: boolean
                description: If the webhook is active or not
                example: false
              created_at:
                type: integer
                description: Created time
                example: 1561488106
              updated_at:
                type: integer
                description: Updated time
                example: 1561488106
        application/json:
          example:
            id: 18048287
            client_id: m9r6keqmo7h7f23btnp3anbez1kglkl
            store_hash: '{store_hash}'
            scope: store/order/*
            destination: https://665b65a6.ngrok.io/webhooks
            headers:
              username: Webhooks User
              password: Webhooks Password
            is_active: true
            created_at: 1561488106
            updated_at: 1561488106
    cartAbandoned_Resp:
      description: ""
      content:
        '*/*':
          schema:
            type: object
            properties:
              callback_Base:
                $ref: '#/components/schemas/callback_Base'
              data:
                type: object
                allOf:
                - $ref: '#/definitions/cart_Created'
                - type: object
                  properties:
                    token:
                      type: string
        application/json:
          example:
            created_at: 1588021465
            store_id: your-store-id
            producer: stores/store_hash
            scope: store/cart/abandoned
            hash: 7aceb38b2b3efae1d91b6a89fe7fdcc908b2d86e
            data:
              type: cart
              id: 8bbe30bd-7d3c-4c5e-a499-7b1bb3bfb0aa
              token: d608433b40f024ef56cb808b71e566bc
    cartConverted_Resp:
      description: ""
      content:
        '*/*':
          schema:
            type: object
            properties:
              callback_Base:
                $ref: '#/components/schemas/callback_Base'
              data:
                type: object
                allOf:
                - $ref: '#/definitions/cart_Created'
                - type: object
                  properties:
                    orderId:
                      type: integer
        application/json:
          example:
            created_at: 1588021880
            store_id: your-store-id
            producer: stores/store_hash
            scope: store/cart/converted
            hash: adb6279b0ff032c690b764f345a4036181c6d985
            data:
              type: cart
              id: f87f2856-73ae-45dd-b817-faea7c384f75
              orderId: 121
    cartCouponApplied_Resp:
      description: ""
      content:
        '*/*':
          schema:
            type: object
            properties:
              callback_Base:
                $ref: '#/components/schemas/callback_Base'
              data:
                $ref: '#/components/schemas/cart_couponApplied'
        application/json:
          example:
            created_at: 1588014754
            store_id: your-store-id
            producer: stores/store_hash
            scope: store/cart/couponApplied
            hash: f6ff9869a37c9153c66839d652b72616ad9a3d23
            data:
              type: cart
              id: 8bbe30bd-7d3c-4c5e-a499-7b1bb3bfb0aa
              couponId: 1
    cartLineItem_Resp:
      description: ""
      content:
        '*/*':
          schema:
            type: object
            properties:
              callback_Base:
                $ref: '#/components/schemas/callback_Base'
              data:
                $ref: '#/components/schemas/cartLineItem_Created'
        cart/lineItem/created:
          example:
            created_at: 1588012546
            store_id: your-store-id
            producer: stores/store_hash
            scope: store/cart/lineItem/created
            hash: 000e9e5ba3cbe55f700cf2a63050f78ee19a1e5b
            data:
              type: cart_line_item
              id: 32b222dc-bfe7-4327-9f75-f3f03cf267e2
              cartId: 8bbe30bd-7d3c-4c5e-a499-7b1bb3bfb0aa
        cart/lineItem/updated:
          example:
            created_at: 1588013239
            store_id: your-store-id
            producer: stores/store_hash
            scope: store/cart/lineItem/updated
            hash: a1473ffdd63cf6ee81e10d24f117a7cade430022
            data:
              type: cart_line_item
              id: 32b222dc-bfe7-4327-9f75-f3f03cf267e2
              cartId: 8bbe30bd-7d3c-4c5e-a499-7b1bb3bfb0aa
        cart/lineItem/deleted:
          example: |-
            {
              "created_at": 1588013526,
              "store_id": "your-store-id",
              "producer": "stores/store_hash",
              "scope": "store/cart/lineItem/deleted",
              "hash": "2637747217be23b10bf960dd961c5813627425e9",
              "data": {
                "type": "cart_line_item",
                "id": "32b222dc-bfe7-4327-9f75-f3f03cf267e2",
                "cartId": "8bbe30bd-7d3c-4c5e-a499-7b1bb3bfb0aa"
              }
            }
    cart_Resp:
      content:
        '*/*':
          schema:
            type: object
            properties:
              callback_Base:
                $ref: '#/components/schemas/callback_Base'
              data:
                $ref: '#/components/schemas/cart_Created'
        store/cart/created:
          example:
            created_at: 1588009674
            store_id: your-store-id
            producer: stores/store_hash
            scope: store/cart/created
            hash: e415a7a0e4d484b805b1d540d0aba719f62f5a01
            data:
              type: cart
              id: add4e20d-5aa3-4304-83d2-246854de4a4d
        store/cart/updated:
          example:
            created_at: 1588010740
            store_id: your-store-id
            producer: stores/store_hash
            scope: store/cart/updated
            hash: a452b98cc16dbb23d14be51f177b23613d301379
            data:
              type: cart
              id: add4e20d-5aa3-4304-83d2-246854de4a4d
        store/cart/deleted:
          example:
            created_at: 1588011031
            store_id: your-store-id
            producer: stores/store_hash
            scope: store/cart/deleted
            hash: 7df72a7cd87248b0ff737855667b8d8a2f25e562
            data:
              type: cart
              id: add4e20d-5aa3-4304-83d2-246854de4a4d
    shipment_Resp:
      description: ""
      content:
        '*/*':
          schema:
            type: object
            properties:
              callback_Base:
                $ref: '#/components/schemas/callback_Base'
              data:
                $ref: '#/components/schemas/shipment_Created'
        store/shipment/created:
          example: |-
            {
                "created_at": 1588186633,
                "store_id": "your-store-id",
                "producer": "stores/store_hash",
                "scope": "store/shipment/created",
                "hash": "3f83e5a23d36021c4ce56d6ec0bc1342e7911a02",
                "data": {
                    "type": "shipment",
                    "id": 3,
                    "orderId": 121
                }
            }
        store/shipment/updated:
          example: |-
            {
                "created_at": 1588187671,
                "store_id": "your-store-id",
                "producer": "stores/store_hash",
                "scope": "store/shipment/updated",
                "hash": "d17122edf13c9ab42dbad6d27b20bcc2359969a1",
                "data": {
                    "type": "shipment",
                    "id": 3,
                    "orderId": 121
                }
            }
        store/shipment/deleted:
          example: |-
            {
                "created_at": 1588187853,
                "store_id": "your-store-id",
                "producer": "stores/store_hash",
                "scope": "store/shipment/deleted",
                "hash": "8f44a0a832b4a1a50c717e26a76cf55633fd90db",
                "data": {
                    "type": "shipment",
                    "id": "3",
                    "orderId": 121
                }
            }
    sku_Resp:
      description: ""
      content:
        '*/*':
          schema:
            type: object
            properties:
              callback_Base:
                $ref: '#/components/schemas/callback_Base'
              data:
                $ref: '#/components/schemas/sku_Updated'
        store/sku/created:
          example:
            created_at: 1588005657
            store_id: your-store-id
            producer: stores/store_hash
            scope: store/sku/created
            hash: c0e5243f541df33ac8d718a6892aab8b88ad5205
            data:
              type: sku
              id: 142
              sku:
                product_id: 77
                variant_id: 101
        store/sku/updated:
          example:
            created_at: 1587763133
            store_id: your-store-id
            producer: stores/store_hash
            scope: store/sku/updated
            hash: 30548ed9eafbacc0f39ee7d44e39d20fd5cc46c1
            data:
              type: sku
              id: 70
              sku:
                product_id: 77
                variant_id: 1
        store/sku/deleted:
          example: |-
            {
              "created_at": 1588007413,
              "store_id": "your-store-id",
              "producer": "stores/store_hash",
              "scope": "store/sku/deleted",
              "hash": "bac74aba643b575c6a7829d2e182d48cc5b0d844",
              "data": {
                "type": "sku",
                "id": 142,
                "sku": {
                  "product_id": 77,
                  "variant_id": 101
                }
              }
            }
    storeInfo_Resp:
      description: ""
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/storeInfo_Updated'
        application/json:
          example:
            created_at: 1588024057
            store_id: your-store-id
            producer: stores/store_hash
            scope: store/information/updated
            hash: 77535b43f4dc24132b7867142d1b4dabac65c3e6
            data:
              type: store
    subscriber_Resp:
      description: ""
      content:
        '*/*':
          schema:
            type: object
            properties:
              callback_Base:
                $ref: '#/components/schemas/callback_Base'
              data:
                $ref: '#/components/schemas/subscriber_Created'
        store/subscriber/created:
          example:
            created_at: 1588350739
            store_id: your-store-id
            producer: stores/store_hash
            scope: store/subscriber/created
            hash: 20c29c5a40f23b1ca7111e683f3062ceab48f732
            data:
              type: subscriber
              id: "2"
        store/subscriber/updated:
          example:
            created_at: 1588352004
            store_id: your-store-id
            producer: stores/store_hash
            scope: store/subscriber/updated
            hash: cb693beb1655af64b9ab88ff6339f2f6f90f28cb
            data:
              type: subscriber
              id: "2"
        store/subscriber/deleted:
          example:
            created_at: 1588352705
            store_id: your-store-id
            producer: stores/store_hash
            scope: store/subscriber/deleted
            hash: f696143917af309148b31978001c90317331a394
            data:
              type: subscriber
              id: "2"
  parameters:
    Accept:
      name: Accept
      in: header
      schema:
        type: string
        default: application/json
    Content-Type:
      name: Content-Type
      in: header
      schema:
        type: string
        default: application/json
